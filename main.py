import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3

bot = telebot.TeleBot("7746129266:AAHR6xOsvcHlK50RV13fhhfsYc4Vxp-J_aI")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∫—Ü–∏—è—Ö
def get_sections():
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, section_name FROM sections")
    sections = cursor.fetchall()
    conn.close()
    return sections


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ id —Å–µ–∫—Ü–∏–∏
def get_questions_by_section(section_id):
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, question_text FROM questions WHERE section_id=?", (section_id,))
    questions = cursor.fetchall()
    conn.close()
    return questions


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ id –≤–æ–ø—Ä–æ—Å–∞
def get_answer(question_id):
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute("SELECT answer_text FROM questions WHERE id=?", (question_id,))
    answer = cursor.fetchone()
    conn.close()
    return answer[0] if answer else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç."


# –ü–æ–ª—É—á–µ–Ω–∏–µ section_id –ø–æ question_id
def get_section_id_by_question(question_id):
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute("SELECT section_id FROM questions WHERE id=?", (question_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None


@bot.message_handler(commands=['start'])
def start(message):
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ Technovation Girls –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω!\n\n"
        "Technovation ‚Äî —ç—Ç–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –¥–µ–≤–æ—á–µ–∫ 8-18 –ª–µ—Ç, "
        "–∫–æ—Ç–æ—Ä–∞—è —É—á–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ! üìö‚ú®\n"
        "–í—ã–±–∏—Ä–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É –Ω–∏–∂–µ, –∏ —è –≤—Å—ë –æ–±—ä—è—Å–Ω—é. üòâ"
    )

    send_sections(message.chat.id)


def send_sections(chat_id):
    sections = get_sections()

    if not sections:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    markup = InlineKeyboardMarkup()
    for section_id, section_name in sections:
        markup.add(InlineKeyboardButton(text=section_name, callback_data=f"section_{section_id}"))

    bot.send_message(chat_id, "üëá –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("section_"))
def show_questions(call):
    section_id = int(call.data.split("_")[1])
    questions = get_questions_by_section(section_id)

    if not questions:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç."
        )
        return

    markup = InlineKeyboardMarkup()
    for question_id, question_text in questions:
        markup.add(InlineKeyboardButton(text=question_text, callback_data=f"question_{question_id}"))
    markup.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ–∫—Ü–∏—è–º", callback_data="back_to_sections"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üëá –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=markup
    )

def get_answer_and_file(question_id):
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute("SELECT answer_text, file_path FROM questions WHERE id=?", (question_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return result[0], result[1]  # answer_text, file_path
    else:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ—Ç.", None


@bot.callback_query_handler(func=lambda call: call.data.startswith("question_"))
def show_answer(call):
    question_id = int(call.data.split("_")[1])
    answer, file_path = get_answer_and_file(question_id)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data=f"back_to_questions_{question_id}"))
    markup.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_sections"))

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=answer,
        reply_markup=markup
    )

    # –ü–æ—Ç–æ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    if file_path:
        try:
            with open(file_path, 'rb') as f:
                bot.send_document(call.message.chat.id, f)
        except Exception as e:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")



@bot.callback_query_handler(func=lambda call: call.data == "back_to_sections")
def back_to_sections(call):
    sections = get_sections()

    if not sections:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        )
        return

    markup = InlineKeyboardMarkup()
    for section_id, section_name in sections:
        markup.add(InlineKeyboardButton(text=section_name, callback_data=f"section_{section_id}"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üëá –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_questions_"))
def back_to_questions(call):
    question_id = int(call.data.split("_")[-1])
    section_id = get_section_id_by_question(question_id)

    questions = get_questions_by_section(section_id)

    markup = InlineKeyboardMarkup()
    for q_id, question_text in questions:
        markup.add(InlineKeyboardButton(text=question_text, callback_data=f"question_{q_id}"))
    markup.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ–∫—Ü–∏—è–º", callback_data="back_to_sections"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üëá –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=markup
    )


bot.polling(none_stop=True)
